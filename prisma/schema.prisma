generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum EpisodeType {
  CRUNCHYROLL
  ANIMESONLINE
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  avatar        String?
  role          UserRole @default(USER)

  watchedepisodes Watched[]
  comments        Comment[]
  ratings         Rating[]

  @@map("users")
}

model Anime {
  id          String    @id @default(uuid())
  title       String
  description String
  slug        String    @unique
  banner      String?
  cover       String?
  nsfw        Boolean   @default(false)
  trailerYtId String?
  rating      Float
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  seasons       Season[]
  genres        Genre[]
  averageRating Float?   @default(0)
  ratingsCount  Int?     @default(0)

  ratings Rating[]

  @@map("animes")
}

model Season {
  id        String    @id @default(uuid())
  title     String
  slug      String
  animeId   String    @map("anime_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  anime    Anime?    @relation(fields: [animeId], references: [id])
  episodes Episode[]

  @@unique([animeId, slug], name: "seasonIdentifier")
  @@map("seasons")
}

model Episode {
  id          String      @id @default(uuid())
  type        EpisodeType
  title       String
  description String?
  slug        String      @unique
  cover       String
  duration    Float
  index       Int
  video       String
  linkEmbed   String?     @map("link-embed")
  seasonId    String      @map("season_id")
  createdAt   DateTime    @default(now()) @map("created_at")

  season          Season?   @relation(fields: [seasonId], references: [id])
  comments        Comment[]
  watchedepisodes Watched[]

  @@map("episodes")
}

model Genre {
  id    String @id @default(uuid())
  slug  String
  title String

  animeId String @map("anime_id")
  Anime   Anime  @relation(fields: [animeId], references: [id])

  @@unique([animeId, slug], name: "genreIdentifier")
  @@map("genres")
}

model Watched {
  id        String    @id @default(uuid())
  stopAt    Float     @map("stop_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  authorId  String @map("author_id")
  episodeId String @map("episode_id")

  author  User     @relation(fields: [authorId], references: [id])
  episode Episode? @relation(fields: [episodeId], references: [id])

  @@unique([authorId, episodeId], name: "watchedIdentifier")
  @@map("watcheds")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  authorId  String    @map("author_id")
  episodeId String    @map("episode_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  author  User     @relation(fields: [authorId], references: [id])
  episode Episode? @relation(fields: [episodeId], references: [id])

  @@map("comments")
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int // Nota de 1 a 5
  review    String?  @db.Text // O texto do review (opcional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId String

  @@unique([userId, animeId]) // Garante que um usuário só pode avaliar um anime uma vez
}
